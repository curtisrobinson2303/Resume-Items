{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red208\green168\blue255;\red31\green31\blue36;\red255\green255\blue255;
\red103\green183\blue164;\red208\green191\blue105;\red108\green121\blue134;\red252\green95\blue163;\red161\green103\blue230;
}
{\*\expandedcolortbl;;\csgenericrgb\c81681\c65692\c99927;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000\c85000;
\csgenericrgb\c40538\c71705\c64209;\csgenericrgb\c81498\c74939\c41233;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c63137\c40392\c90196;
}
\margl1440\margr1440\vieww13840\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 EMBED PARITY CHECK UNFINISHED BUFFER?CHECK CODE \
\
\
\
\pard\tx543\pardeftab543\partightenfactor0

\f1\fs22 \cf2 \cb3 uint64_t\cf4 \cb3  index;\
    \cf2 \cb3 uint64_t\cf4 \cb3  count;\
    \cf2 \cb3 uint64_t\cf4 \cb3  *Aptr;\
    \cf2 \cb3 uint64_t\cf4 \cb3  *Bptr;\
    \cf2 \cb3 uint64_t\cf4 \cb3  *Cptr;\
    \cf2 \cb3 uint64_t\cf4 \cb3  holder;\
    \cf2 \cb3 uint64_t\cf4 \cb3  ceiling;\
    \cf2 \cb3 uint64_t\cf4 \cb3  bytesRead;\
    \cf2 \cb3 uint64_t\cf4 \cb3  tempOffset;\
\
  Aptr = \cf5 \cb3 fFillBuffer\cf4 \cb3 ;\
    Bptr = \cf5 \cb3 fFillBuffer\cf4 \cb3 ;\
    Cptr = \cf5 \cb3 fFillBuffer\cf4 \cb3 ;\
    \
    bytesRead = \cf6 \cb3 0\cf4 \cb3 ;\
\pard\tx543\pardeftab543\partightenfactor0

\f0\fs24 \cf0 \cb1 \
\pard\tx543\pardeftab543\partightenfactor0

\f1\fs22 \cf7 \cb3 //base case 1\cf4 \cb3 \
    
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (CurrentOffset == \cf6 \cb3 0\cf4 \cb3  && BytesJustWritten == \cf5 \cb3 BufferSize\cf4 \cb3 )\
    \{\
        bytesRead = \cf9 \cb3 pread\cf4 \cb3 (parityFileDescriptor,\cf5 \cb3 ParityDriverCalc\cf4 \cb3 , \cf5 \cb3 StripeUnitSize\cf4 \cb3 , \cf6 \cb3 0\cf4 \cb3 );  \cf7 \cb3 //Read 1 StripeUnitSize block of Data from the parity disk and store into the ParityDriverCalc Memory Block\cf4 \cb3 \
        Aptr += \cf6 \cb3 0\cf4 \cb3 ;\
        Bptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 );\
        Cptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * \cf6 \cb3 2\cf4 \cb3 ;\
    \}\
    
\f2\b \cf8 \cb3 else
\f1\b0 \cf4 \cb3  
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (CurrentOffset > \cf6 \cb3 0\cf4 \cb3  && BytesJustWritten == \cf5 \cb3 BufferSize\cf4 \cb3 )\
    \{\
        bytesRead = \cf9 \cb3 pread\cf4 \cb3 (parityFileDescriptor,\cf5 \cb3 ParityDriverCalc\cf4 \cb3 , \cf5 \cb3 StripeUnitSize\cf4 \cb3 , CurrentOffset);  \cf7 \cb3 //Read 1 StripeUnitSize block of Data from the parity disk and store into the ParityDriverCalc Memory Block\cf4 \cb3 \
        Aptr += \cf6 \cb3 0\cf4 \cb3 ;\
        Bptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 );\
        Cptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * \cf6 \cb3 2\cf4 \cb3 ;\
    \}\
    \
    \cf7 \cb3 //base case 2\cf4 \cb3 \
    
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (CurrentOffset == \cf6 \cb3 0\cf4 \cb3  && BytesJustWritten == \cf5 \cb3 BufferSize\cf4 \cb3  && \cf5 \cb3 BufferSize\cf4 \cb3  > \cf6 \cb3 49152\cf4 \cb3 )\
    \{\
        \cf2 \cb3 uint64_t\cf4 \cb3  iter, i, j, holder = \cf6 \cb3 0\cf4 \cb3 ;\
        iter = (\cf5 \cb3 BufferSize\cf4 \cb3  / \cf6 \cb3 49152\cf4 \cb3 );\
        j = \cf6 \cb3 0\cf4 \cb3 ;\
        
\f2\b \cf8 \cb3 for
\f1\b0 \cf4 \cb3 (i = \cf6 \cb3 0\cf4 \cb3 ; i <= iter; i++)\
        \{\
            \cf7 \cb3 //load in the first part of parity in 16kblock then check then next\cf4 \cb3 \
            bytesRead = \cf9 \cb3 pread\cf4 \cb3 (parityFileDescriptor,\cf5 \cb3 ParityDriverCalc\cf4 \cb3 , \cf5 \cb3 StripeUnitSize\cf4 \cb3 , holder);  \cf7 \cb3 //Read 1 StripeUnitSize block of Data from the parity disk and store into the ParityDriverCalc Memory Block\cf4 \cb3 \
            
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (i == \cf6 \cb3 0\cf4 \cb3 )\
            \{\
                Aptr += \cf6 \cb3 0\cf4 \cb3 ;\
                Bptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 );\
                Cptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * \cf6 \cb3 2\cf4 \cb3 ;\
            \}\
            
\f2\b \cf8 \cb3 else
\f1\b0 \cf4 \cb3  
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 ( i > \cf6 \cb3 1\cf4 \cb3  )\
            \{\
                Aptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j));\
                Bptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j)) + ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ));\
                Cptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j)) + ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 )*\cf6 \cb3 2\cf4 \cb3 );\
            \}\
            j += \cf6 \cb3 3\cf4 \cb3 ;\
            holder += \cf5 \cb3 StripeUnitSize\cf4 \cb3 ;\
        \}\
    \}\
    
\f2\b \cf8 \cb3 else
\f1\b0 \cf4 \cb3  
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (CurrentOffset > \cf6 \cb3 0\cf4 \cb3  && BytesJustWritten == \cf5 \cb3 BufferSize\cf4 \cb3  && \cf5 \cb3 BufferSize\cf4 \cb3  > \cf6 \cb3 49152\cf4 \cb3 )\
    \{\
        \cf2 \cb3 uint64_t\cf4 \cb3  iter, i, j, holder = \cf6 \cb3 0\cf4 \cb3 ;\
        iter = (\cf5 \cb3 BufferSize\cf4 \cb3  / \cf6 \cb3 49152\cf4 \cb3 );\
        j = \cf6 \cb3 0\cf4 \cb3 ;\
        
\f2\b \cf8 \cb3 for
\f1\b0 \cf4 \cb3 (i = \cf6 \cb3 1\cf4 \cb3 ; i <= iter; i++)\
        \{\
            \cf7 \cb3 //load in the first part of parity in 16kblock then check then next\cf4 \cb3 \
            bytesRead = \cf9 \cb3 pread\cf4 \cb3 (parityFileDescriptor,\cf5 \cb3 ParityDriverCalc\cf4 \cb3 , \cf5 \cb3 StripeUnitSize\cf4 \cb3 , CurrentOffset + holder);  \cf7 \cb3 //Read 1 StripeUnitSize block of Data from the parity disk and store into the ParityDriverCalc Memory Block\cf4 \cb3 \
            
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 (i == \cf6 \cb3 0\cf4 \cb3 )\
            \{\
                Aptr += \cf6 \cb3 0\cf4 \cb3 ;\
                Bptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 );\
                Cptr += (\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * \cf6 \cb3 2\cf4 \cb3 ;\
            \}\
            
\f2\b \cf8 \cb3 else
\f1\b0 \cf4 \cb3  
\f2\b \cf8 \cb3 if
\f1\b0 \cf4 \cb3 ( i > \cf6 \cb3 1\cf4 \cb3  )\
            \{\
                Aptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j));\
                Bptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j)) + ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ));\
                Cptr += ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 ) * (j)) + ((\cf5 \cb3 StripeUnitSize\cf4 \cb3 /\cf6 \cb3 8\cf4 \cb3 )*\cf6 \cb3 2\cf4 \cb3 );\
            \}\
            j += \cf6 \cb3 3\cf4 \cb3 ;\
            holder += \cf5 \cb3 StripeUnitSize\cf4 \cb3 ;\
        \}\
    \}}